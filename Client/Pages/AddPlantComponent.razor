@page "/addPlant"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Plantsy.Shared
@using System.IO
@attribute [Authorize]
@inject HttpClient Http

<h2>New Plant</h2>


@using System.ComponentModel.DataAnnotations

@if (success)
{
	<MudText>
		@model.PlantName added to plants!
	</MudText>
}

<div style="max-width: 400px;">
	<EditForm Model="@model" OnValidSubmit="AddPlant">
		<DataAnnotationsValidator />
		<MudCard>
			<MudCardContent>
				<MudTextField Label="Plant Name"
							  @bind-Value="model.PlantName" For="@(() => model.PlantName)" />
				<MudTextField Label="Plant Type" Class="mt-3"
							  @bind-Value="model.PlantType" For="@(() => model.PlantType)" />
				<MudTextField Label="Info about plant" Class="mt-3"
							  @bind-Value="model.Info" For="@(() => model.Info)" />

				
			</MudCardContent>

			<MudCardActions>
				<InputFile id="fileInput" OnChange="UploadImage" hidden single />
				<MudIconButton HtmlTag="label"
							   Color="Color.Info"
							   Icon="@Icons.Filled.PhotoCamera"
							   for="fileInput">
				</MudIconButton>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
			</MudCardActions>
		</MudCard>
	</EditForm>
</div>




@if (uploaded)
{

	<img src="@imageSrc" alt="DAS IMAGE" />

}

@code
{
	IList<IBrowserFile> files = new List<IBrowserFile>();
	string imageSrc = "";
	bool uploaded = false;
	private async Task UploadImage(InputFileChangeEventArgs e)
	{
		MemoryStream ms = new MemoryStream();
		await e.File.OpenReadStream().CopyToAsync(ms);
		var bytes = ms.ToArray();

		var base64 = Convert.ToBase64String(bytes);
		imageSrc = String.Format("data:image/gif;base64,{0}", base64);
		uploaded = true;
	}
}



@code {
	NewPlantForm model = new NewPlantForm();
	bool success;

	public class NewPlantForm
	{
		[Required]
		[StringLength(30, ErrorMessage = "Name length can't be more than 30.")]
		public string PlantName { get; set; }

		[Required]
		[StringLength(30, ErrorMessage = "Type length can't be more than 30.")]
		public string PlantType { get; set; }

		[Required]
		[StringLength(200, ErrorMessage = "Info can't be longer than 200 character.")]
		public string Info { get; set; }

		//[Required]
		public Image Image { get; set; }

	}


	private async Task AddPlant()
	{
		model.Image = new Image
		{
			ImageName = model.PlantName + "Image",
			ImagePath = imageSrc,

		};
		var status = await Http.PostAsJsonAsync("plants", model);
		if (status.IsSuccessStatusCode)
		{
			success = true;
			StateHasChanged();
			model.Info = null;
			model.PlantName = null;
			model.PlantType = null;
			model.Image = null;
			imageSrc = "";
			uploaded = false;

		}

	}

}



