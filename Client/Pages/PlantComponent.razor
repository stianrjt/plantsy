@page "/allPlants"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Plantsy.Shared
@attribute [Authorize]
@inject HttpClient Http


<h2>Plants</h2>

@if (plants == null)
{
	var emptyPlants = new List<Plant>();
	<MudTable Items="@emptyPlants" Hover="true" Breakpoint="Breakpoint.Sm" Loading=true LoadingProgressColor="Color.Info">
		<HeaderContent>
			<MudTh>Date</MudTh>
			<MudTh>Temp. (C)</MudTh>
			<MudTh>Temp. (F)</MudTh>
			<MudTh>Summary</MudTh>
		</HeaderContent>
	</MudTable>

}
else
{
	//TODO: Leggeg inn fargekoding baset på om planten må vannes. Dette kan settes som interval.

	<MudTable Items="@plants" Hover="true" Breakpoint="Breakpoint.Sm" Loading=false LoadingProgressColor="Color.Info">
		<HeaderContent>
			<MudTh>Plant Name</MudTh>
			<MudTh>Plant Type</MudTh>
			<MudTh>Last Watered</MudTh>
			<MudTh>Info</MudTh>
			<MudTh>Water Plant Now</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Date">@context.PlantName</MudTd>
			<MudTd DataLabel="temp-c">@context.PlantType</MudTd>
			<MudTd DataLabel="temp-f">@context.WaterLog.OrderByDescending(x => x.WaterDate).FirstOrDefault()?.WaterDate.DateTime</MudTd>
			<MudTd DataLabel="summary" HideSmall="_hidePosition">@context.Info</MudTd>
			<MudTd DataLabel="wateredNow">
					<MudButton Variant="Variant.Filled" Size="Size.Small"
							OnClick="@(() => WaterPlant(context))">Water Plant</MudButton>
				</MudTd>
		</RowTemplate>
	</MudTable>

}

@code {
	private List<Plant> plants;
	private bool _hidePosition;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			plants = await Http.GetFromJsonAsync<List<Plant>>("plants");
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	public async void WaterPlant(Plant plant)
	{
		var waterLog = plant.WaterLog;
		waterLog.Add(new Water { WaterDate = DateTimeOffset.Now, });
		plant.WaterLog = waterLog;
		await Http.PutAsJsonAsync($"plants/{plant.ID}", plant);
		return;
	}

}